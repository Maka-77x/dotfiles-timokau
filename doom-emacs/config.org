* Emacs Config

My literate emacs configuration. Run ~doom sync~ after modifying.

** Appearance

*** General

#+BEGIN_SRC elisp
(setq doom-theme 'doom-tomorrow-day)
#+END_SRC

*** (Mixed pitch) fonts

Set fonts and enable mixed pitch mode.

#+BEGIN_SRC elisp
(setq
 doom-variable-pitch-font (font-spec :family "Inter" :height 1.0)
)
(add-hook 'text-mode-hook #'mixed-pitch-mode)
#+END_SRC

*** Controlling font size

We want to control font size with =Ctrl-{+,-,0}=. The default bindings seem less intuitive to me.

#+BEGIN_SRC elisp
(after! evil
    (map!
      :n "C-+" #'doom/increase-font-size
      :n "C--" #'doom/decrease-font-size
      :n "C-0" #'doom/reset-font-size
    )
)
#+END_SRC

** Org configuration

*** Locations

#+BEGIN_SRC elisp
(setq org-directory "~/data/documents/logseq/")
#+END_SRC

*** Utils

#+BEGIN_SRC elisp
(defun my/internalize-asset-and-link (source)
  "Moves an asset to the assets directory and inserts a link to it."
  (interactive
   ; Interactively choose a file to move
   (list (expand-file-name (read-file-name "Select a file to move and link:" "~/"))))
  (let (
        ; Set the base for `expand-file-name`
        (default-directory "/home/timo/data/documents/logseq/assets/")
        ; Keep the filename from the chosen file
        (tgt-filename (file-name-nondirectory source)))
    (let (
          ; Combine the original filename with the assets directory
          (target (expand-file-name tgt-filename)))
      ; Move
      (rename-file source target)
      ; Link to the moved file
      (org-insert-link nil target tgt-filename)
    )))
#+END_SRC

*** Capture

Set up capture templates.

#+BEGIN_SRC elisp
(after! org-capture
  (setq
    org-capture-templates
    (quote
      (
        ; Capture a link to the inbox with
        ; org-protocol:///capture?template=c&url=some_url&title=some_title&body=some_text
        (
          "c" "org-protocol-capture" entry (file "~/data/documents/logseq/pages/inbox.org")
          "* TODO [[%:link][%:description]]\n %i" :immediate-finish t
        )
      )
    )
  )
)
#+END_SRC

*** Agenda

#+BEGIN_SRC elisp
(after! org
  ; Use all org-roam files as agenda files
  (defun my/refresh-agenda-list ()
    (interactive)
    (setq org-agenda-files (org-roam--list-all-files)))
  ; Initialize the agenda list
  (my/refresh-agenda-list)
  ; Rebuild it after 5 minutes of idle time
  (run-with-idle-timer 300 t (lambda () (my/refresh-agenda-list)))
)
#+END_SRC

*** Refiling

#+BEGIN_SRC
(after! org
  (setq org-refile-use-cache t)
)
#+END_SRC
** Org-roam (v1) configuration

Note that we use org-roam v1 for now.

*** Locations

Configure org-roam to use the folder structure that was initialized by logseq. Note that logseq and org-roam are not perfectly compatible, so take care when mixing both tools.

#+BEGIN_SRC elisp
(setq org-roam-directory "~/data/documents/logseq/")
(setq org-roam-dailies-directory "journals/")
; Exclude logseq artifacts
(setq org-roam-file-exclude-regexp (concat (regexp-quote "logseq/bak") "\\|" (regexp-quote "logseq/.recycle")))
#+END_SRC

*** Backlinks buffer

Configure the org-roam backlinks buffer to only show when explicitly toggled.
#+BEGIN_SRC elisp
(after! org
  ; Disable the doom-emacs hook that opens the org-roam buffer on find-file
  (setq +org-roam-open-buffer-on-find-file nil)
  (map!
    ; Toggle the org-roam buffer (displaying backlinks)
    :n "SPC n r t" #'org-roam-buffer-toggle-display
  )
)
#+END_SRC
