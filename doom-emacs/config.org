#+PROPERTY: header-args:elisp :tangle yes
* Emacs Config

My literate emacs configuration. Run ~doom sync~ after modifying.

See [[this blog post][https://nullprogram.com/blog/2016/12/22/]] for reasons to enable lexical binding.

#+BEGIN_SRC elisp
;;; config.el -*- lexical-binding: t; -*-
#+END_SRC


** Filetype specific

*** Latex

Add command to count words with texcount ([[original][https://app.uio.no/ifi/texcount/faq.html#emacs]).
#+BEGIN_SRC elisp
(defun texcount ()
  (interactive)
  (let*
    ( (this-file (buffer-file-name))
      (enc-str (symbol-name buffer-file-coding-system))
      (enc-opt
        (cond
          ((string-match "utf-8" enc-str) "-utf8")
          ((string-match "latin" enc-str) "-latin1")
          ("-encoding=guess")
      ) )
      (word-count
        (with-output-to-string
          (with-current-buffer standard-output
            (call-process "texcount" nil t nil "-sum" "-1" enc-opt this-file)
    ) ) ) )
    (message word-count)
) )
(add-hook 'LaTeX-mode-hook (lambda () (define-key LaTeX-mode-map "\C-cw" 'texcount)))
(add-hook 'latex-mode-hook (lambda () (define-key latex-mode-map "\C-cw" 'texcount)))
#+END_SRC

** Appearance

*** General

#+BEGIN_SRC elisp
(setq doom-theme 'doom-tomorrow-day)
; Increase default font size
(set-face-attribute 'default nil :height 120)
; Auto-save by default
(setq auto-save-default t)
#+END_SRC

*** Property styles

Hide =#+title:= and style the actual title text (orange, semi-bold, somewhat larger).
#+BEGIN_SRC elisp
(after! org
  (setq org-hidden-keywords '(title))
  (add-hook 'org-mode-hook (lambda()
    (set-face-attribute
      'org-document-title
      nil
      :foreground "DarkOrange3"
      :weight 'semi-bold
      :height 1.3
    )
  ))
)
#+END_SRC

*** (Mixed pitch) fonts

Set fonts and enable mixed pitch mode.

#+BEGIN_SRC elisp
(setq
 doom-variable-pitch-font (font-spec :family "Inter" :height 1.0)
)
(add-hook 'text-mode-hook #'mixed-pitch-mode)
#+END_SRC

*** Line wrapping

Configure emacs to soft-wrap on - and / to get nicer url wrapping.
#+BEGIN_SRC elisp
; https://emacs.stackexchange.com/questions/19027/how-to-wrap-line-at-some-characters-other-than-space/19029#19029
(setq word-wrap-by-category t)
(modify-category-entry '(?- . ?/) ?|)
#+END_SRC

*** Org-modern

Enable org-modern mode, which makes some stylistic changes (bullets instead of starts for headings, "pretty" tables, borders around tags, TODOs and time stamps etc.).

#+BEGIN_SRC elisp
(after! org
  ; Set org-specific line spacing. This is not strictly org-modern specific, but
  ; it is very related since the appearance of tag borders depends on it. Also
  ; see the org-modern-label-border setting.
  (defun org-line-spacing() (setq line-spacing 0.3))
  (add-hook 'org-mode-hook 'org-line-spacing)
  (global-org-modern-mode)
  (setq
   org-modern-label-border 3 ; Depends on line spacing
   )
)
#+END_SRC

*** Controlling font size

We want to control font size with =Ctrl-{+,-,0}=. The default bindings seem less intuitive to me.

#+BEGIN_SRC elisp
(after! evil
    (map!
      :n "C-+" #'doom/increase-font-size
      :n "C--" #'doom/decrease-font-size
      :n "C-0" #'doom/reset-font-size
    )
)
#+END_SRC

** General behavior

#+BEGIN_SRC elisp
; Automatically reload files from disk if they have changed
(global-auto-revert-mode t)

; Do not override the s binding with evil-snipe
; https://github.com/hlissner/doom-emacs/blob/400fa0836d830ac409a67a4c4af3012b5e07dc60/modules/editor/evil/README.org#restoring-old-substitution-behavior-on-ss
(remove-hook 'doom-first-input-hook #'evil-snipe-mode)
#+END_SRC

** Org configuration

Open pdfs in firefox by default.
#+BEGIN_SRC elisp
(after! org
	(add-to-list 'org-file-apps '("\\.pdf\\'" . "firefox %s"))
)
#+END_SRC

*** Locations

#+BEGIN_SRC elisp
(setq org-directory "~/data/documents/logseq/")
#+END_SRC

*** Append instead of inserting

By default links are inserted before the cursor in evil-mode. That is inconvenient, since I commonly want to append a link to the end of a line. We can work around this by temporarily leaving normal mode (append) before calling the insertion command.

#+BEGIN_SRC elisp
; Inspired by https://github.com/syl20bnr/spacemacs/issues/14137#issuecomment-735437329
(defun advice-around-append-first (orig-fun &rest args)
  "Insert links after the cursor when in evil normal mode."
  (let ((is-in-evil-normal-mode (and (bound-and-true-p evil-mode)
                                     (not (bound-and-true-p evil-insert-state-minor-mode)))))
    (if (not is-in-evil-normal-mode)
        (apply orig-fun args)
      (evil-append 0)
      (apply orig-fun args)
      (evil-normal-state))))
(advice-add 'org-roam-insert :around #'advice-around-append-first)
(advice-add 'org-insert-link :around #'advice-around-append-first)
#+END_SRC

*** Org-appear

Set up org-appear to reveal hidden text (such as link targets) when entering evil insert mode. The text is hidden again when the cursor leaves the object.

#+BEGIN_SRC elisp
(after! org
  ; Enable org-appear
  (add-hook 'org-mode-hook 'org-appear-mode)
  ; Configure to toggle with org-appear
  (setq
    org-appear-autolinks t
    org-appear-autosubmarkers t
    org-appear-autoentities t
    org-appear-autokeywords t
    org-appear-inside-latex t
  )
  ; Do not toggle visibility automatically based on cursor location. That tends to
  ; cause jumps and is annoying when navigating in evil mode.
  (setq org-appear-trigger 'manual)
  ; Instead, reveal hidden content when entering insert mode. Stop org-appear when
  ; leaving insert mode, but do not immediatly hide the element again (due to the
  ; org-appear-manual-linger setting).
  (add-hook 'org-mode-hook (lambda ()
                             (add-hook 'evil-insert-state-entry-hook
                                       #'org-appear-manual-start
                                       nil
                                       t)
                             (add-hook 'evil-insert-state-exit-hook
                                       #'org-appear-manual-stop
                                       nil
                                       t)
  ))
  ; Keep the current item open until the cursor moves away from it. That makes it
  ; possible to reveal an item by entering insert mode and then navigating within
  ; the revealed item in normal mode.
  (setq org-appear-manual-linger t)
)
#+END_SRC

*** Utils

#+BEGIN_SRC elisp
(defun my/internalize-asset-and-link (source)
  "Moves an asset to the assets directory and inserts a link to it."
  (interactive
   ; Interactively choose a file to move
   (list (expand-file-name (read-file-name "Select a file to move and link:" "~/"))))
  (let (
        ; Set the base for `expand-file-name`
        (default-directory "/home/timo/data/documents/logseq/assets/")
        ; Keep the filename from the chosen file
        (tgt-filename (file-name-nondirectory source)))
    (let (
          ; Combine the original filename with the assets directory
          (target (expand-file-name tgt-filename)))
      ; Move
      (rename-file source target)
      ; Link to the moved file
      (org-insert-link nil target tgt-filename)
    )))
#+END_SRC

*** Bindings

Custom org-relate bindings.

#+BEGIN_SRC elisp
(after! evil
  (map!
   :n "SPC l f" #'my/internalize-asset-and-link ; "link file"
   )
  )
#+END_SRC

*** Capture

Set up capture templates.

#+BEGIN_SRC elisp
(after! org
  (setq org-id-link-to-org-use-id t) ; make sure the capture annotations (%a) use id links
  ; The roam-local version of org-id-link-to-org-use-id, defined by doom-emacs
  (setq +org-roam-link-to-org-use-id t)
  (map! :i "M-r" #'org-roam-node-insert)
  (setq
    org-capture-templates
    (quote
      (
        ; Capture a link to the inbox with
        ; org-protocol:///capture?template=c&url=some_url&title=some_title&body=some_text
        (
          "c" "org-protocol-capture" entry (file "~/data/documents/logseq/pages/inbox.org")
          "* TODO Process [[%:link][%:description]]\n %i" :immediate-finish t
        )
        ("t" "Tasks")
        ("tl" "Task linking to the current position" entry (file "~/data/documents/logseq/pages/inbox.org") "* TODO %?%a \n  %U \n  %i" :empty-lines 1)
        ("tt" "Task" entry (file "~/data/documents/logseq/pages/inbox.org") "* TODO %? \n  %U" :empty-lines 1)
      )
    )
  )
)
#+END_SRC

*** Task management

#+BEGIN_SRC elisp
(after! org
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-todo-keywords '(
     (sequence "TODO(t)" "DOING(n)" "|" "DONE(d)" "CANCELLED(c)")
     (sequence "PROJ" "ACTIVE" "|" "FINISHED")
    )
  )
)
(setq org-tag-alist '(
                      ("someday" . ?s)

                      (:startgroup . nil)
                      ("research_experiment" . ?e)
                      ("research_reading" . ?r)
                      ("research_writing" . ?w)
                      ("consideration" . ?c)
                      ("work_admin" . ?a)
                      ("work_process" . ?p)
                      ("life" . ?l)
                      (:endgroup . nil)
                      ))
(setq org-use-fast-tag-selection 't)

; From Sacha Chua http://disq.us/p/29ngaud
(defun my/org-archive-done-tasks (&optional scope)
    "Archive finished or cancelled tasks. SCOPE can be 'file or 'tree."
    (interactive)
    (org-map-entries
     (lambda ()
       (org-archive-subtree)
       (setq org-map-continue-from (outline-previous-heading)))
     "TODO=\"DONE\"|TODO=\"CANCELLED\"" (or scope (if (org-before-first-heading-p) 'file 'tree))))

#+END_SRC

*** Agenda and Review

#+BEGIN_SRC elisp
(after! org
  ; Build agenda files from org roam notes with a certain tag
  ; Adapted from: https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/#build-your-org-agenda-from-org-roam-notes
  (defun my/org-roam-filter-by-tag (tag-name)
    (lambda (node)
      (member tag-name (org-roam-node-tags node))))

  (defun my/org-roam-list-note-files-by-tag (tag-name)
    (delete-dups (mapcar #'org-roam-node-file
            (seq-filter
             (my/org-roam-filter-by-tag tag-name)
             (org-roam-node-list)))))

  (defun my/refresh-agenda-list ()
    (interactive)
    (setq org-agenda-files (my/org-roam-list-note-files-by-tag "agenda")))

  ; Hide the "agenda" tag in the agenda (by definition all tasks that show up
  ; in the agenda have this tag, so it doesn't add any information.)
  (setq org-agenda-hide-tags-regexp "agenda")

  ; Initialize the agenda list
  (my/refresh-agenda-list)
  ; Rebuild it after 5 minutes of idle time
  (run-with-idle-timer 300 t (lambda () (my/refresh-agenda-list)))

  ; Specify the agenda prefix. In particular, do not show the category in the
  ; "todo" agenda.
  (setq org-agenda-prefix-format '(
    (agenda . " %i %-12:c%?-12t% s")
    (todo . "")
    (tags . "")
    (search . " %i %-12:c")))

  (setq org-agenda-custom-commands
      '(
      ("a" "Week agenda"
       ((agenda "" ((org-agenda-overriding-header "5 Days in Detail")
                    (org-agenda-skip-scheduled-if-done t)
                    (org-agenda-skip-deadline-if-done t)
                    ; start agenda today
                    (org-agenda-start-day "+0d")
                    (org-agenda-span 5) ; show the next 5 days
                    ; Do not use deadline warnings, as those can't easily be dismissed and
                    ; clutter the view.
                    (org-deadline-warning-days 0)
                    ; Show logged events in the agenda
                    (org-agenda-start-with-log-mode t)))
        (agenda "" ((org-agenda-overriding-header "\nThe Deadlines Ahead")
                    ; Only pending deadlines here
                    (org-agenda-entry-types '(:deadline))
                    (org-agenda-skip-deadline-if-done t)
                    ; Only show dates with deadlines
                    (org-agenda-show-all-dates nil)
                    (org-agenda-time-grid nil)
                    ; Cover the next 2 weeks
                    (org-agenda-span 14)
                    (org-deadline-warning-days 0)
                    ; Start where the "5 days in detail" stop
                    (org-agenda-start-day "+5d")))
        ))
      ("g" "Grouped view of soon tasks"
       ; Tasks grouped by mutually exclusive tags
       ((tags-todo "research_experiment-someday")
        (tags-todo "research_reading-someday")
        (tags-todo "research_writing-someday")
        (tags-todo "consideration-someday")
        (tags-todo "work_admin-someday")
        (tags-todo "work_process-someday")
        (tags-todo "life-someday")
        ; All tasks not included in any of the previous groups
        (tags-todo "-research_experiment-research_reading-research_writing-consideration-work_admin-work_process-life-someday")
        ))
      ("p" "Planning view" tags-todo "-someday"
       ((org-agenda-todo-ignore-scheduled 'future)
        (org-agenda-tags-todo-honor-ignore-options t)
        ))
      ("s" "Someday view"
         tags-todo "someday")
      ("R" "Review tasks" tags-todo "-CANCELLED"
         ((org-agenda-overriding-header "Reviews Scheduled")
          (org-agenda-skip-function 'org-review-agenda-skip)
          (org-agenda-cmp-user-defined 'org-review-compare)
          (org-agenda-sorting-strategy '(user-defined-down))))
      ("r" "Reading list"
         tags-todo "reading")
         ))

  ; Configure org-review
  (setq org-review-sets-next-date nil) ; Compute next date dynamically
  (setq org-review-delay "+0d") ; Use the review timestamp for ordering only, not for scheduling
  ; Assume last review at epoch 0 if none is specified
  (advice-add #'org-review-last-review-prop :after-until (lambda (&rest r)
    (format-time-string "%Y-%m-%d %a %H:%M:%S" (seconds-to-time 0))
    ))

  ; Add a keybinding to mark an item as reviewed
  (map! :after org-agenda
        :map org-agenda-mode-map
        :desc "Mark current item as reviewed and go to the next item."
        "gl" (lambda () (interactive) (org-review-insert-last-review) (org-agenda-next-item 1)))
 )
#+END_SRC

Indicate in the agenda whether a TODO entry has further content. Source: [[https://emacs.stackexchange.com/questions/38014/org-agenda-show-whether-entry-has-text][stackoverflow]].

#+BEGIN_SRC elisp
(defun org-agenda-delete-property-regions (property value)
  "Kill all regions where text PROPERTY has VALUE."
  (let ((pos (point-min)))
    (while (setq pos (next-single-property-change pos property))
      (when (eq (get-text-property pos property) value)
        (kill-region pos (next-single-property-change pos property))))))

(defcustom org-agenda-ignore-lines-list
  '(org-scheduled-time-regexp
    "$" ;; empty lines are ignored
    (":PROPERTIES:" . ":END:") ;; property lists are ignored
    )
  "Regular expressions for lines that are ignored when lines are counted.
Each entry is either a regular expression as string or as variable containing the regexp string
or a cons cell with the car being the start regexp and the cdr being the end regexp."
  :type '(repeat
      (choice
       regexp
       symbol
       (cons (choice regexp symbol)
         (choice regexp symbol))))
  :group 'org-agenda)

(defsubst org-agenda-count-lines-regexp (matcher)
  "If MATCHER is a symbol return its value
otherwise return MATCHER directly."
  (or (and (symbolp matcher) (symbol-value matcher))
      matcher))

(defun org-agenda-count-lines-looking-at (list)
  "A variant of `looking-at'.
It takes a LIST of form `org-agenda-ignore-lines-list'
instead of a regular expression and returns the
matching entry of that list."
  (cl-loop
   with cmp
   for item in list do
   (setq cmp item)
   (when (consp cmp)
     (setq cmp (car cmp)))
   when (looking-at (org-agenda-count-lines-regexp cmp))
   return item))
;; Test:
;; (org-agenda-count-lines-looking-at '(org-scheduled-time-regexp (":properties:" . ":end:")))SCHEDULED: <2019-01-04>
;; (org-agenda-count-lines-looking-at '(org-scheduled-time-regexp (":properties:" . ":end:"))):PROPERTIES:

(defun org-agenda-count-lines (&optional b e)
  "Count lines in the region from B to E.
If B is a string the lines in that string are counted.
Whitespace at the beginning of the lines is skipped over.
Afterwards lines are ignored if they match
one of the entries in `org-agenda-ignore-lines-list'.
B and E default to `point-min' and `point-max', respectively."
  (if (stringp b)
      (with-temp-buffer
    (insert b)
    (org-agenda-count-lines))
    (unless b (setq b (point-min)))
    (if e
    (save-excursion
      (goto-char e)
      (setq e (line-end-position)))
      (setq e (point-max)))
    (let ((count 0)
      match)
      (save-excursion
    (goto-char b)
    (forward-line 0)
    (while
        (< (point) e)
      (skip-syntax-forward " ")
      (if (setq match (org-agenda-count-lines-looking-at org-agenda-ignore-lines-list))
          (when (consp match)
        (re-search-forward (concat "^ *" (org-agenda-count-lines-regexp (cdr match))) e))
        (cl-incf count))
      (forward-line)))
      count)))
;; Test: (org-agenda-count-lines " SCHEDULED: <2019-01-01>\n Some text.\n :PROPERTIES:\n :TEST: some line\n :END:\n\n\n")

(defun org-agenda-add-num-of-contents-lines ()
  "Add number of contents lines for each entry in the agenda buffer."
  ;; Text properties are already added.
  (message "Running org-agenda-add-num-of-contents-lines.")
  (org-agenda-delete-property-regions 'org-agenda-num-of-contents-lines t)
  (cl-loop with hd-marker
           for int being the intervals property 'org-hd-marker
           if (setq hd-marker (get-text-property (car int) 'org-hd-marker))
           do
           (goto-char (cdr int))
           (insert
        (propertize
         (format
          " (%d)"
          (org-agenda-count-lines (org-agenda-get-some-entry-text hd-marker (buffer-size))))
             'org-agenda-num-of-contents-lines t)
            )))

(add-hook 'org-agenda-finalize-hook #'org-agenda-add-num-of-contents-lines)
#+END_SRC

*** Refiling

#+BEGIN_SRC
(after! org
  (setq org-refile-use-cache t)
  (advice-add 'org-refile :after 'org-save-all-org-buffers) ; save after refiling
)
#+END_SRC

*** Linking

Make sure =org-id-store-link= works together with =org-insert-link=.
#+BEGIN_SRC elisp
(after! org
  ; For some reason org-id-store-link stores the links in the
  ; org-store-link-plist variable while org-insert-link uses org-stored-links.
  ; Advise org-id-store-link to add the link to org-stored-links as well.
  ; Source: https://github.com/doomemacs/doomemacs/issues/3085#issuecomment-627071545
  (defadvice! +org--store-id-link-a (link)
    :filter-return #'org-id-store-link
    (when (and link org-store-link-plist)
      (add-to-list 'org-stored-links
                   (list (plist-get org-store-link-plist :link)
                         (plist-get org-store-link-plist :description))))
    link)
)
#+END_SRC

*** Document annotation (org-noter)

#+BEGIN_SRC elisp
; Use two separate frames for notes and the document to support multi-monitor
; workflows.
(setq org-noter-notes-window-location 'other-frame)
(setq org-noter-insert-selected-text-inside-note t)
#+END_SRC

** Org-roam  configuration

*** Locations

Configure org-roam to use the folder structure that was initialized by logseq. Note that logseq and org-roam are not perfectly compatible, so take care when mixing both tools.

#+BEGIN_SRC elisp
(setq org-roam-directory "~/data/documents/logseq/")
(setq org-roam-dailies-directory "journals/")
; Exclude logseq artifacts
(setq org-roam-file-exclude-regexp (concat (regexp-quote "logseq/bak") "\\|" (regexp-quote "logseq/.recycle")))
#+END_SRC

*** Templates

#+BEGIN_SRC elisp
  (setq org-roam-capture-templates '(
    (
      "d"
      "default"
      plain
      "%?"
      :target (file+head "pages/${slug}.org" "#+title: ${title}\n")
      :unnarrowed t
    )
  ))
  (setq org-roam-dailies-capture-templates '(
    (
      "d"
      "default"
      entry
      "* %?"
      :target (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n\n")
    )
  ))
#+END_SRC

*** Backlinks buffer

Configure the org-roam backlinks buffer to only show when explicitly toggled.
#+BEGIN_SRC elisp
(after! org
  ; Disable the doom-emacs hook that opens the org-roam buffer on find-file
  (setq +org-roam-open-buffer-on-find-file nil)
  (map!
    ; Toggle the org-roam buffer (displaying backlinks)
    :n "SPC n r t" #'org-roam-buffer-toggle-display
  )
)
#+END_SRC

** Academic workflow
*** Locations
#+BEGIN_SRC elisp
(setq
   zotero-bib (concat org-directory "zotero.bib")
)
#+END_SRC

*** Org-cite configuration
Configure org-cite to use the zotero-generated biblatex file.
#+BEGIN_SRC elispp
(setq
   org-cite-global-bibliography (list zotero-bib)
)
#+END_SRC

*** Citar configuration
Use citar as the org-cite frontend and configure it to use the same bibliography as org-cite.
#+BEGIN_SRC elisp
(setq citar-bibliography (list zotero-bib))
(after! citar
  (setq
     org-cite-insert-processor 'citar
     org-cite-follow-processor 'citar
     org-cite-activate-processor 'citar
  )
)
#+END_SRC

*** Org-roam-bibtex configuration
Configure org-roam-bibtex to connect to citar. We want to use org-roam to manage the notes attached to bibliography items. This has been [[https://github.com/doomemacs/doomemacs/pull/6728][added]] to doom biblio module, can be removed on next doom update.
#+BEGIN_SRC elisp
(use-package! org-roam-bibtex :after citar org-roam)
(use-package! citar-org-roam :after citar org-roam :no-require :config (citar-org-roam-mode))
(after! (citar citar-org-roam org-roam-bibtex)
  (citar-register-notes-source
    'orb-citar-source (list :name "Org-Roam Notes"
           :category 'org-roam-node
           :items #'citar-org-roam--get-candidates
           :hasitems #'citar-org-roam-has-notes
           :open #'citar-org-roam-open-note
           :create #'orb-citar-edit-note
           :annotate #'citar-org-roam--annotate))
  (setq citar-notes-source 'orb-citar-source)
)
(setq orb-preformat-keywords '("citekey" "author" "year"))
(setq citar-org-roam-note-title-template "Paper/${year}/${author}/${title}")
#+END_SRC
