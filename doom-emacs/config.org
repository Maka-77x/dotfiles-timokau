* Emacs Config

My literate emacs configuration. Run ~doom sync~ after modifying.

** Appearance

*** General

#+BEGIN_SRC elisp
(setq doom-theme 'doom-tomorrow-day)
; Increase default font size
(set-face-attribute 'default nil :height 120)
#+END_SRC

*** Property styles

Hide =#+title:= and style the actual title text (orange, semi-bold, somewhat larger).
#+BEGIN_SRC elisp
(after! org
  (setq org-hidden-keywords '(title))
  (add-hook 'org-mode-hook (lambda()
    (set-face-attribute
      'org-document-title
      nil
      :foreground "DarkOrange3"
      :weight 'semi-bold
      :height 1.3
    )
  ))
)
#+END_SRC

*** (Mixed pitch) fonts

Set fonts and enable mixed pitch mode.

#+BEGIN_SRC elisp
(setq
 doom-variable-pitch-font (font-spec :family "Inter" :height 1.0)
)
(add-hook 'text-mode-hook #'mixed-pitch-mode)
#+END_SRC

*** Line wrapping

Configure emacs to soft-wrap on - and / to get nicer url wrapping.
#+BEGIN_SRC elisp
; https://emacs.stackexchange.com/questions/19027/how-to-wrap-line-at-some-characters-other-than-space/19029#19029
(setq word-wrap-by-category t)
(modify-category-entry '(?- . ?/) ?|)
#+END_SRC

*** Org-modern

Enable org-modern mode, which makes some stylistic changes (bullets instead of starts for headings, "pretty" tables, borders around tags, TODOs and time stamps etc.).

#+BEGIN_SRC elisp
(after! org
  ; Set org-specific line spacing. This is not strictly org-modern specific, but
  ; it is very related since the appearance of tag borders depends on it. Also
  ; see the org-modern-label-border setting.
  (defun org-line-spacing() (setq line-spacing 0.3))
  (add-hook 'org-mode-hook 'org-line-spacing)
  (global-org-modern-mode)
  (setq
   org-modern-label-border 3 ; Depends on line spacing
   )
)
#+END_SRC

*** Controlling font size

We want to control font size with =Ctrl-{+,-,0}=. The default bindings seem less intuitive to me.

#+BEGIN_SRC elisp
(after! evil
    (map!
      :n "C-+" #'doom/increase-font-size
      :n "C--" #'doom/decrease-font-size
      :n "C-0" #'doom/reset-font-size
    )
)
#+END_SRC

** General behavior

#+BEGIN_SRC elisp
; Automatically reload files from disk if they have changed
(global-auto-revert-mode t)

; Do not override the s binding with evil-snipe
; https://github.com/hlissner/doom-emacs/blob/400fa0836d830ac409a67a4c4af3012b5e07dc60/modules/editor/evil/README.org#restoring-old-substitution-behavior-on-ss
(remove-hook 'doom-first-input-hook #'evil-snipe-mode)
#+END_SRC

** Org configuration

*** Locations

#+BEGIN_SRC elisp
(setq org-directory "~/data/documents/logseq/")
#+END_SRC

*** Append instead of inserting

By default links are inserted before the cursor in evil-mode. That is inconvenient, since I commonly want to append a link to the end of a line. We can work around this by temporarily leaving normal mode (append) before calling the insertion command.

#+BEGIN_SRC elisp
; Inspired by https://github.com/syl20bnr/spacemacs/issues/14137#issuecomment-735437329
(defun advice-around-append-first (orig-fun &rest args)
  "Insert links after the cursor when in evil normal mode."
  (let ((is-in-evil-normal-mode (and (bound-and-true-p evil-mode)
                                     (not (bound-and-true-p evil-insert-state-minor-mode)))))
    (if (not is-in-evil-normal-mode)
        (apply orig-fun args)
      (evil-append 0)
      (apply orig-fun args)
      (evil-normal-state))))
(advice-add 'org-roam-insert :around #'advice-around-append-first)
(advice-add 'org-insert-link :around #'advice-around-append-first)
#+END_SRC

*** Org-appear

Set up org-appear to reveal hidden text (such as link targets) when entering evil insert mode. The text is hidden again when the cursor leaves the object.

#+BEGIN_SRC elisp
(after! org
  ; Enable org-appear
  (add-hook 'org-mode-hook 'org-appear-mode)
  ; Configure to toggle with org-appear
  (setq
    org-appear-autolinks t
    org-appear-autosubmarkers t
    org-appear-autoentities t
    org-appear-autokeywords t
    org-appear-inside-latex t
  )
  ; Do not toggle visibility automatically based on cursor location. That tends to
  ; cause jumps and is annoying when navigating in evil mode.
  (setq org-appear-trigger 'manual)
  ; Instead, reveal hidden content when entering insert mode. Stop org-appear when
  ; leaving insert mode, but do not immediatly hide the element again (due to the
  ; org-appear-manual-linger setting).
  (add-hook 'org-mode-hook (lambda ()
                             (add-hook 'evil-insert-state-entry-hook
                                       #'org-appear-manual-start
                                       nil
                                       t)
                             (add-hook 'evil-insert-state-exit-hook
                                       #'org-appear-manual-stop
                                       nil
                                       t)
  ))
  ; Keep the current item open until the cursor moves away from it. That makes it
  ; possible to reveal an item by entering insert mode and then navigating within
  ; the revealed item in normal mode.
  (setq org-appear-manual-linger t)
)
#+END_SRC

*** Utils

#+BEGIN_SRC elisp
(defun my/internalize-asset-and-link (source)
  "Moves an asset to the assets directory and inserts a link to it."
  (interactive
   ; Interactively choose a file to move
   (list (expand-file-name (read-file-name "Select a file to move and link:" "~/"))))
  (let (
        ; Set the base for `expand-file-name`
        (default-directory "/home/timo/data/documents/logseq/assets/")
        ; Keep the filename from the chosen file
        (tgt-filename (file-name-nondirectory source)))
    (let (
          ; Combine the original filename with the assets directory
          (target (expand-file-name tgt-filename)))
      ; Move
      (rename-file source target)
      ; Link to the moved file
      (org-insert-link nil target tgt-filename)
    )))
#+END_SRC

*** Bindings

Custom org-relate bindings.

#+BEGIN_SRC elisp
(after! evil
  (map!
   :n "SPC l f" #'my/internalize-asset-and-link ; "link file"
   )
  )
#+END_SRC

*** Capture

Set up capture templates.

#+BEGIN_SRC elisp
(after! org-capture
  (setq org-id-link-to-org-use-id t) ; make sure the capture annotations (%a) use id links
  (setq
    org-capture-templates
    (quote
      (
        ; Capture a link to the inbox with
        ; org-protocol:///capture?template=c&url=some_url&title=some_title&body=some_text
        (
          "c" "org-protocol-capture" entry (file "~/data/documents/logseq/pages/inbox.org")
          "* TODO [[%:link][%:description]]\n %i" :immediate-finish t
        )
        ("t" "Tasks")
        ("tl" "Task linking to the current position" entry (file "~/data/documents/logseq/pages/inbox.org") "* TODO %? %<%I:%M %p>\n  %U \n  %a\n  %i" :empty-lines 1)
      )
    )
  )
)
#+END_SRC

*** Task management

#+BEGIN_SRC elisp
(setq org-log-done 'time)
(setq org-log-into-drawer t)
(setq org-todo-keywords '(
   (sequence "TODO(t)" "DOING(n)" "|" "DONE(d)" "CANCELLED(c)")
   (sequence "PROJ" "ACTIVE" "|" "FINISHED")
  )
)
#+END_SRC

*** Agenda

#+BEGIN_SRC elisp
(after! org
  ; Use all org-roam files as agenda files
  (defun my/refresh-agenda-list ()
    (interactive)
    (setq org-agenda-files (org-roam--list-all-files)))
  ; Initialize the agenda list
  (my/refresh-agenda-list)
  ; Rebuild it after 5 minutes of idle time
  (run-with-idle-timer 300 t (lambda () (my/refresh-agenda-list)))

  (setq org-agenda-start-day "+0d") ; start agenda today
  (setq org-agenda-span 5) ; show the next 5 days
  ; Do not use deadline warnings, as those can't easily be dismissed and
  ; clutter the view.
  (setq org-deadline-warning-days 0)
  ; Show logged events in the agenda
  (setq org-agenda-start-with-log-mode t)
)
#+END_SRC

*** Refiling

#+BEGIN_SRC
(after! org
  (setq org-refile-use-cache t)
  (advice-add 'org-refile :after 'org-save-all-org-buffers) ; save after refiling
)
#+END_SRC

*** Linking

Make sure =org-id-store-link= works together with =org-insert-link=.
#+BEGIN_SRC elisp
(after! org
  ; For some reason org-id-store-link stores the links in the
  ; org-store-link-plist variable while org-insert-link uses org-stored-links.
  ; Advise org-id-store-link to add the link to org-stored-links as well.
  ; Source: https://github.com/doomemacs/doomemacs/issues/3085#issuecomment-627071545
  (defadvice! +org--store-id-link-a (link)
    :filter-return #'org-id-store-link
    (when (and link org-store-link-plist)
      (add-to-list 'org-stored-links
                   (list (plist-get org-store-link-plist :link)
                         (plist-get org-store-link-plist :description))))
    link)
)
#+END_SRC

** Org-roam (v1) configuration

Note that we use org-roam v1 for now.

*** Locations

Configure org-roam to use the folder structure that was initialized by logseq. Note that logseq and org-roam are not perfectly compatible, so take care when mixing both tools.

#+BEGIN_SRC elisp
(setq org-roam-directory "~/data/documents/logseq/")
(setq org-roam-dailies-directory "journals/")
; Exclude logseq artifacts
(setq org-roam-file-exclude-regexp (concat (regexp-quote "logseq/bak") "\\|" (regexp-quote "logseq/.recycle")))
#+END_SRC

*** Backlinks buffer

Configure the org-roam backlinks buffer to only show when explicitly toggled.
#+BEGIN_SRC elisp
(after! org
  ; Disable the doom-emacs hook that opens the org-roam buffer on find-file
  (setq +org-roam-open-buffer-on-find-file nil)
  (map!
    ; Toggle the org-roam buffer (displaying backlinks)
    :n "SPC n r t" #'org-roam-buffer-toggle-display
  )
)
#+END_SRC
